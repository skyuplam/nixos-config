# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  inputs,
  ...
}: let
  dns = inputs.nix-secrets.networking.dns;
  # FIXME: Cannot use the private dns to the whole system
  # dnsP = inputs.nix-secrets.networking.dnsP;
in {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "ahci" "thunderbolt" "usbhid" "usb_storage" "sd_mod"];
  boot.kernelModules = ["kvm-amd" "wireguard"];
  boot.extraModulePackages = [];
  boot.initrd.systemd = {
    network = {
      enable = true;
      wait-online = {
        enable = true;
        anyInterface = true;
        timeout = 30;
      };
      networks = {
        "10-wan" = {
          matchConfig.Name = "enp10s0";
          networkConfig = {
            # start a DHCP Client for IPv4 Addressing/Routing
            DHCP = "ipv4";
            LinkLocalAddressing = "ipv4";
            IPv6AcceptRA = false;
            DNSOverTLS = true;
            DNSSEC = true;
            DNS = dns;
          };
          # make routing on this interface a dependency for network-online.target
          linkConfig.RequiredForOnline = "routable";
        };
      };
    };
  };

  networking = {
    useDHCP = lib.mkDefault false;
    interfaces = {
      enp10s0.useDHCP = lib.mkDefault false;
      wlp11s0.useDHCP = lib.mkDefault false;
    };
    nameservers = dns;
  };

  services.resolved = {
    enable = true;
    dnssec = "true";
    domains = ["~."];
    fallbackDns = dns;
    dnsovertls = "true";
  };

  services.btrfs = {
    autoScrub = {
      enable = true;
      interval = "weekly";
      fileSystems = ["/"];
    };
  };

  networking.hosts = inputs.nix-secrets.networking.hosts;

  systemd = {
    network = {
      enable = true;
      wait-online = {
        enable = true;
        anyInterface = true;
        timeout = 30;
      };
      netdevs = {
        "99-wg0" = {
          netdevConfig = {
            Kind = "wireguard";
            Name = "wg0";
            MTUBytes = "1300";
            Description = "WireGuard tunnel wg0";
          };
          wireguardConfig = {
            ListenPort = inputs.nix-secrets.networking.wireguard.wg0.listenPort;
            PrivateKeyFile = "/etc/wireguard/private.key";
            FirewallMark = 34952;
          };
          wireguardPeers = [
            {
              PublicKey = inputs.nix-secrets.networking.wireguard.wg0.publicKey;
              AllowedIPs = inputs.nix-secrets.networking.wireguard.wg0.allowedIPs;
              Endpoint = inputs.nix-secrets.networking.wireguard.wg0.endpoint;
              PresharedKeyFile = "/etc/wireguard/preshared.key";
              PersistentKeepalive = 25;
              RouteTable = 1000;
            }
          ];
        };
      };
      networks = {
        "10-wan" = {
          matchConfig.Name = "enp10s0";
          domains = ["~."];
          networkConfig = {
            # start a DHCP Client for IPv4 Addressing/Routing
            DHCP = "ipv4";
            DNSDefaultRoute = "yes";
            LinkLocalAddressing = "ipv4";
            IPv6AcceptRA = "no";
            DNSOverTLS = "yes";
            DNSSEC = "yes";
            DNS = dns;
          };
          # make routing on this interface a dependency for network-online.target
          linkConfig.RequiredForOnline = "routable";
        };
        "50-wg0" = {
          matchConfig.Name = "wg0";
          address = inputs.nix-secrets.networking.wireguard.wg0.ips;
          # gateway = inputs.nix-secrets.networking.wireguard.wg0.gateway;
          dns = dns;
          domains = ["~."];
          networkConfig = {
            DNSDefaultRoute = "no";
          };
          routingPolicyRules = [
            {
              FirewallMark = 34952;
              InvertRule = "yes";
              Table = 1000;
              Priority = 10;
            }
          ];
          # routes = [
          #   {
          #     Gateway = inputs.nix-secrets.networking.wireguard.wg0.gateway;
          #     GatewayOnLink = "yes";
          #     Table = 1000;
          #   }
          # ];
        };
      };
    };
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  # networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp10s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp11s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
