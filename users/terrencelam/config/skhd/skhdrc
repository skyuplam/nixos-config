# hotkey       = <mode> '<' <action> | <action>
#
# mode         = 'name of mode' | <mode> ',' <mode>
#
# action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
# keysym       = <mod> '-' <key> | <key>
#
# mod          = 'modifier keyword' | <mod> '+' <mod>
#
# key          = <literal> | <keycode>
#
# literal      = 'single letter or built-in keyword'
#
# keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
# proc_map_lst = * <proc_map>
#
# proc_map     = <string> ':' <command> | <string>     '~' |
#                '*'      ':' <command> | '*'          '~'
#
# string       = '"' 'sequence of characters' '"'
#
# command      = command is executed through '$SHELL -c' and
#                follows valid shell syntax. if the $SHELL environment
#                variable is not set, it will default to '/bin/bash'.
#                when bash is used, the ';' delemetter can be specified
#                to chain commands.
#
#                to allow a command to extend into multiple lines,
#                prepend '\' at the end of the previous line.
#
#                an EOL character signifies the end of the bind.
#
# ->           = keypress is not consumed by skhd
#
# *            = matches every application not specified in <proc_map_lst>
#
# ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
# Global hotkeys
cmd - return    : open -na Ghostty
cmd - b         : open -na Firefox
cmd + shift - b : open -na "Google Chrome"
cmd - e         : open -na "Keyguard"
cmd + shift - e : open -na "1Password"

# Modes
:: default
:: resizemode @

# Mode Activations
meh - s             ; resizemode
resizemode < escape ; default

# Focus window
.define yabai_focus   : yabai -m window --focus {{1}} || yabai -m display --focus {{1}}
.define focus_recent  : yabai -m window --focus recent
.define window_action : yabai -m window --{{1}} {{2}}
.define space_focus   : yabai -m space --focus {{1}}
.define yabai_warp    : yabai -m window --warp {{1}} || begin; yabai -m window --display {{1}}; yabai -m window --focus recent; end;
.define resize_window : yabai -m window --resize {{1}}:{{2}}:{{3}}

cmd - h : @yabai_focus("west")
cmd - j : @yabai_focus("south")
cmd - k : @yabai_focus("north")
cmd - l : @yabai_focus("east")

# Focus space
ctrl - 1 : @yabai_focus("1")
ctrl - 2 : @yabai_focus("2")
ctrl - 3 : @yabai_focus("3")
ctrl - 4 : @yabai_focus("4")
ctrl - 5 : @yabai_focus("5")
ctrl - 6 : @yabai_focus("6")
ctrl - 7 : @yabai_focus("7")
ctrl - 8 : @yabai_focus("8")

# move managed windows
cmd + ctrl - h : @yabai_warp("west")
cmd + ctrl - j : @yabai_warp("south")
cmd + ctrl - k : @yabai_warp("north")
cmd + ctrl - l : @yabai_warp("east")

# Resize
resizemode < h : @resize_window("left", "-20", "0")
resizemode < l : @resize_window("right", "20", "0")
resizemode < j : @resize_window("bottom", "0", "20")
resizemode < k : @resize_window("top", "0", "-20")

# Toggle float
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# Toggle gap for the current space
shift + alt - p : yabai -m space --toggle padding; \
                  yabai -m space --toggle gap;

# Balance layout
alt - b : yabai -m space --balance
alt - space: yabai -m window --toggle split
# Zoom parent
alt - f : yabai -m window --toggle zoom-parent
